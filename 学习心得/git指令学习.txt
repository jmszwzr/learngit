git version/git --version：查看git版本号

clear/reset：清空当前面板
pwd：显示当前目录
git config --list：显示当前的git的配置

cat readme.txt：查看readme.txt中的内容

git status：要随时掌握工作区的状态

git diff：如果git status告诉你有文件被修改过，用git diff可以查看修改内容

git blame：显示文件中的每一行的作者、最新的变更提交和提交事件展示出来

git log:命令显示从最近到最远的提交日志

git add [文件名]
git commit -m "[说明]"
git log --pretty=oneline ：简洁信息显示
git push origin master：推送本地到远程仓库

git reset --hard HEAD^：回到上一个版本
git reset --hard HEAD^^：回到上上一个版本
git reset --hard HEAD~100：回到往上第100个版本

git reset --hard 3628164：指定回到某个版本

git reflog：Git提供了一个命令git reflog用来记录你的每一次命令

git diff HEAD -- readme.txt：命令可以查看工作区和版本库里面最新版本的区别
git diff    #是工作区(work dict)和暂存区(stage)的比较
git diff --cached    #是暂存区(stage)和分支(master)的比较

---------------------------------------------撤销修改---------------------------------------------
git checkout --file：可以丢弃工作区的修改：
(其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。)
	命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
	一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
	一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

git reset HEAD file：用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区
	git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。


场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

echo>test.txt：在当前目录下，新建一个文本文件，文件名为test
rm test.txt：删除文件


---------------------------------------------操作远程库---------------------------------------------
1、本地仓库的内容推送到GitHub仓库:
	$ git remote add origin git@github.com:ppreyer/first_app.git
	【添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。】
	[delete：git remote rm origin：To remove a remote repository you enter]
2、第一次推送master分支的所有内容
	git push -u origin master
3、从现在起，只要本地作了提交，就可以通过命令：
	git push origin master


创建dev分支，然后切换到dev分支：git checkout -b dev
[git checkout命令加上-b参数表示创建并切换，相当于以下两条命令:
 git branch dev
 git checkout dev]
 
git branch：列出所有本地分支，当前分支前面会标一个*号
git branch -r：列出所有远程分支
git branch -a：列出所有本地分支和远程分支

git branch [branch-name]：新建一个分支，但依然停留在当前分支

Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>


git log --graph：命令可以看到分支合并图

git merge --no-ff -m "merge with no-ff" dev：因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

git log --graph --pretty=oneline --abbrev-commit：查看分支历史

git branch -D <name>：如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除

git stash：Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作
git stash list：查看当前分支的被stash的工作现场
	恢复：
		1)用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除
		2)另一种方式是用git stash pop，恢复的同时把stash内容也删了
	多次stash:
		1)先用git stash list查看，然后恢复指定的stash
		2)用命令：git stash apply stash@{0}

git remote：查看远程库
git remote -v：显示更详细的信息
（显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。）
git remote show [remote]：显示某个远程仓库的信息(如：git remote show origin)

git pull：从远程抓取分支，如果有冲突，要先处理冲突

master：分支是主分支，因此要时刻与远程同步；
dev：分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
bug：分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
feature：分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！

---------------------------------------------多人协作---------------------------------------------
多人协作的工作模式通常是这样：

1、首先，可以试图用git push origin branch-name推送自己的修改；
2、如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
3、如果合并有冲突，则解决冲突，并在本地提交；
4、没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
这就是多人协作的工作模式，一旦熟悉了，就非常简单。



































===========================  First clone  ===========================
1、添加公钥
2、ssh -T git@oschina.net 		#测试是否连接成功,输入yes后,终端提示 `Welcome to Git@OSC, xxx!` 说明连接成功

===========================  branch  ===========================

1、git branch -av  #查看本地和远程分支列表-详细
   git branch -a   #查看本地和远程分支列表-简单
2、git branch -rv  #查看所有远程分支-详细
   git branch -r   #查看所有远程分支-简单
3、git remote show origin 	#查看不存在对应远程分支的本地分支
4、#拉取远程分支并创建本地分支
	1> git checkout -b [local branch-name x] origin/[remote branch-name x] 	#创建本地分支x，并切换至本地分支x
	2> git fetch origin [remote branch-name x]:[local branch-name x] 		#创建本地分支

===========================  fetch  ===========================

1、git fetch：相当于从远程获取最新版本到本地，不会自动merge
[方式一]
git fetch origin master 			#从远程的origin的master主分支下载最新的版本到origin/master分支上
git log -p master..origin/master 	#比较本地的master分支和origin/master分支的差别
git merge origin/master 			#合并

[方式二]
git fetch origin master:temp 		#从远程获取最新的版本到本地的temp分支上，并切换到temp分支
git diff temp 						#本地分支与temp进行比较
git merge temp 						#合并

2、删除远程分支
git push origin :[remote branch-name x] 	#推送一个空的分支给远程的分支x，作用即为删除远程仓库中之分名为x的分支

3、将本地分支推送至远程仓库
git push origin [local branch-name x]:master 	#提交本地x分支作为远程的master分支
git push origin [local branch-name dev]:dev 	#提交本地dev分支作为远程仓库的dev分支，如果远程不存在，则自动创建分支

4、git远程删除分支后，本地git branch -a已然能看到的解决办法
	1> git remote show origin 	#本地能查到但远程已不存在的分支信息
	2> git remote prune origin 	#删除远程仓库不存在的分支

===========================  .gitignore  ===========================

1、.gitignore不起作用解决

git remote rm -r --cached .
git add .
git commit -m 'update .gitignore'

2、方式二

git rm --cached director/filename  or git rm --chched filename
git add .
git commit -m 'fixed unstracked files'

===========================  远程仓库  ===========================

1、git remote rm origin 	#解除绑定的远程仓库

===========================  标签管理  ===========================
1、创建标签
git tag v1.0			#新建一个标签，默认为HEAD
git tag					#查看所有标签
git log --pretty=oneline --abbrev-commit
						#查找历史提交的commit id
git tag v0.9 76a270a	#给相对应commit id进行定位打标签
git show v1.0			#查看标签信息
git tag -a v1.0 -m 'version 1.0 released' 75a270a
						#创建带有说明的标签，用-a指定标签名，-m指定说明文字
git tag -s v1.0 -m "signed version 0.2 released" 74a270a
						#用PGP签名标签
2、操作标签
git tag -d v1.0			#删除标签[未推送到远程]
git push origin v1.0	#推送标签到远程
git push origin --tags	#一次性推送全部尚未推送到远程的本地标签

已推送到远程的标签删除方法
git tag -d v1.0			#先从本地删除
git push origin :refs/tags/v1.0
						#删除一个远程标签
